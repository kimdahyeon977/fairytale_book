{"ast":null,"code":"var _jsxFileName = \"/Users/iminho/diaryai/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const sendSentenceToServer = async sentence => {\n    try {\n      const response = await fetch(\"http://localhost:8000/app\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: sentence\n        })\n      });\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        console.log(jsonResponse); // 서버로부터의 응답을 출력\n      } else {\n        console.log(\"Request failed!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 함수 사용 예\n  useEffect(() => {\n    sendSentenceToServer(\"This is a test sentence.\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","App","_s","sendSentenceToServer","sentence","response","fetch","method","headers","body","JSON","stringify","prompt","ok","jsonResponse","json","console","log","error","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/iminho/diaryai/src/App.js"],"sourcesContent":["import { useEffect } from \"react\";\n\nfunction App() {\n  const sendSentenceToServer = async (sentence) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/app\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ prompt: sentence }),\n      });\n\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        console.log(jsonResponse); // 서버로부터의 응답을 출력\n      } else {\n        console.log(\"Request failed!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 함수 사용 예\n  useEffect(() => {\n    sendSentenceToServer(\"This is a test sentence.\");\n  }, []);\n\n  return <div className=\"App\"></div>;\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,oBAAoB,GAAG,MAAOC,QAAQ,IAAK;IAC/C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAER;QAAS,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACQ,EAAE,EAAE;QACf,MAAMC,YAAY,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAC1CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC,CAAC,CAAC;MAC7B,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAChC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;;EAED;EACApB,SAAS,CAAC,MAAM;IACdK,oBAAoB,CAAC,0BAA0B,CAAC;EAClD,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOH,OAAA;IAAKmB,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACpC;AAACrB,EAAA,CA5BQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}